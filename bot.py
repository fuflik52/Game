import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7819477296:AAGsHv9V8vfCAAw1aWrc_goeLzSdr3yW0Jg"

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users = {}

class User:
    def __init__(self, user_id, username):
        self.user_id = user_id
        self.username = username
        self.balance = 5000
        self.rating = 0
        self.clan = None
        self.current_game = None
        self.game_data = {}

class BlackjackGame:
    def __init__(self):
        self.deck = ['2', '3', '4', '5', '6', '7', '8', '9', '10', '–í–∞–ª–µ—Ç', '–î–∞–º–∞', '–ö–æ—Ä–æ–ª—å', '–¢—É–∑'] * 4
        self.suits = ['‚ô†Ô∏è', '‚ô£Ô∏è', '‚ô•Ô∏è', '‚ô¶']
        self.card_values = {
            '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10,
            '–í–∞–ª–µ—Ç': 10, '–î–∞–º–∞': 10, '–ö–æ—Ä–æ–ª—å': 10, '–¢—É–∑': 11
        }

    def get_card(self):
        card = random.choice(self.deck)
        suit = random.choice(self.suits)
        return card, suit

    def calculate_score(self, cards):
        score = 0
        aces = 0
        for card, _ in cards:
            if card == '–¢—É–∑':
                aces += 1
            else:
                score += self.card_values[card]
        
        for _ in range(aces):
            if score + 11 <= 21:
                score += 11
            else:
                score += 1
        return score

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id not in users:
        users[user.id] = User(user.id, user.username)

    keyboard = [
        ["üíé –û—Å–Ω–æ–≤–Ω–æ–µ", "üöÄ –ò–≥—Ä—ã"],
        ["üòé –ü–µ—Ä—Å–æ–Ω–∞–∂"],
        ["üÉè –ü–æ–∫–µ—Ä", "üìä –ë–∏—Ä–∂–∞"],
        ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å", "üìí –ü—Ä–æ—Ñ–∏–ª—å", "üî• –î–æ–Ω–∞—Ç"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        "–Ø - —Ç–≤–æ–π –Ω–æ–≤—ã–π –∏–≥—Ä–æ–≤–æ–π –¥—Ä—É–≥.\n\n"
        "üéâ –ó–¥–µ—Å—å —Ç–µ–±—è –∂–¥—ë—Ç –º–æ—Ä–µ –≤–µ—Å–µ–ª—å—è –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–≥—Ä, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π —Ç–≤–æ–π –¥–µ–Ω—å –±—ã–ª —è—Ä—á–µ! ü•∞\n\n"
        "üöÄ –ì–æ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ? –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ –∏ –≤–ø–µ—Ä—ë–¥! üëá",
        reply_markup=reply_markup
    )

async def show_games_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["üÉè –ü–æ–∫–µ—Ä"],
        ["üé∞ –õ–æ—Ç–µ—Ä–µ—è", "üé∞ –ö–∞–∑–∏–Ω–æ", "üé≤ –†—É–ª–µ—Ç–∫–∞"],
        ["üìà –ö—Ä–∞—à", "üìä –¢—Ä–µ–π–¥", "üí∞ –°–ª–æ—Ç—ã"],
        ["ü™ô –ú–æ–Ω–µ—Ç–∫–∞", "‚ô†Ô∏è –ë–ª—ç–∫–¥–∂–µ–∫", "‚ùå –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏"],
        ["üî¢ 2048", "‚úèÔ∏è –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", "‚ùì –ó–∞–≥–∞–¥–∫–∏"],
        ["‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=reply_markup)

async def show_blackjack_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="blackjack_start"),
            InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="blackjack_help")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üÉè –ë–ª—ç–∫–¥–∂–µ–∫\n"
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 10$\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def show_bet_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = users.get(update.callback_query.from_user.id)
    if not user:
        return
    
    one_third = user.balance // 3
    two_thirds = (user.balance * 2) // 3
    
    keyboard = [
        [
            InlineKeyboardButton(f"{one_third}$", callback_data=f"blackjack_bet_{one_third}"),
            InlineKeyboardButton(f"{two_thirds}$", callback_data=f"blackjack_bet_{two_thirds}")
        ],
        [
            InlineKeyboardButton("–í–∞-–±–∞–Ω–∫", callback_data=f"blackjack_bet_{user.balance}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text(
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance}$\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:",
        reply_markup=reply_markup
    )

async def check_blackjack(update: Update, user, game, player_score):
    if player_score == 21:
        bet = user.game_data['blackjack']['bet']
        win_amount = bet * 2  # –í—ã–∏–≥—Ä—ã—à —Ö2 –ø—Ä–∏ 21 –æ—á–∫–µ
        user.balance += win_amount
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞—Ä—Ç
        player_cards_text = "üé´ –í–∞—à–∏ –∫–∞—Ä—Ç—ã:\n"
        for i, (card, suit) in enumerate(user.game_data['blackjack']['player_cards'], 1):
            player_cards_text += f"‚†Ä{i}‚É£ {suit} {card}\n"
        
        dealer_cards_text = "üéü –ö–∞—Ä—Ç—ã –∫—Ä—É–ø—å–µ:\n"
        dealer_card, dealer_suit = user.game_data['blackjack']['dealer_cards'][0]
        dealer_cards_text += f"‚†Ä1‚É£ {dealer_suit} {dealer_card}"
        
        game_text = (
            f"üí° –í–∞—à–∏ –æ—á–∫–∏: {player_score} ‚èê –ö—Ä—É–ø—å–µ: {game.calculate_score(user.game_data['blackjack']['dealer_cards'])}\n"
            f"{player_cards_text}\n"
            f"{dealer_cards_text}\n"
            f"üåü –ë–ª—ç–∫–¥–∂–µ–∫! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount}$!\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance}$"
        )
        
        keyboard = [[InlineKeyboardButton("üîÑ –ò–≥—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="blackjack_start")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.message.reply_text(game_text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(game_text, reply_markup=reply_markup)
            
        user.game_data.pop('blackjack')
        return True
    return False

async def start_blackjack_game(update: Update, context: ContextTypes.DEFAULT_TYPE, bet: int):
    query = update.callback_query
    user = users.get(query.from_user.id)
    if not user:
        return
    
    if bet > user.balance:
        await query.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
        return
    
    user.balance -= bet
    game = BlackjackGame()
    user.game_data['blackjack'] = {
        'game': game,
        'bet': bet,
        'player_cards': [game.get_card(), game.get_card()],
        'dealer_cards': [game.get_card()]
    }
    
    player_score = game.calculate_score(user.game_data['blackjack']['player_cards'])
    dealer_score = game.calculate_score(user.game_data['blackjack']['dealer_cards'])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª—ç–∫–¥–∂–µ–∫
    if await check_blackjack(update, user, game, player_score):
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞
    player_cards_text = "üé´ –í–∞—à–∏ –∫–∞—Ä—Ç—ã:\n"
    for i, (card, suit) in enumerate(user.game_data['blackjack']['player_cards'], 1):
        player_cards_text += f"‚†Ä{i}‚É£ {suit} {card}\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞—Ä—Ç –∫—Ä—É–ø—å–µ
    dealer_cards_text = "üéü –ö–∞—Ä—Ç—ã –∫—Ä—É–ø—å–µ:\n"
    dealer_card, dealer_suit = user.game_data['blackjack']['dealer_cards'][0]
    dealer_cards_text += f"‚†Ä1‚É£ {dealer_suit} {dealer_card}"
    
    game_text = (
        f"–ò–≥—Ä–æ–∫, –í–∞—à–∏ –æ—á–∫–∏: {player_score} ‚èê –ö—Ä—É–ø—å–µ: {dealer_score}\n"
        f"{player_cards_text}\n"
        f"{dealer_cards_text}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance}$"
    )
    
    keyboard = [
        [
            InlineKeyboardButton("‚ûï –ï—â—ë", callback_data="blackjack_hit"),
            InlineKeyboardButton("‚ùå –°—Ç–æ–ø", callback_data="blackjack_stand")
        ],
        [
            InlineKeyboardButton("üí∞ –£–¥–≤–æ–∏—Ç—å", callback_data="blackjack_double")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(game_text, reply_markup=reply_markup)

async def blackjack_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "[üíã –ï–±–µ–º –ª–µ—Å—é] –ò–≥—Ä–æ–∫, –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "‚ô£Ô∏è –°—É—Ç—å –∏–≥—Ä—ã ¬´–ë–ª—ç–∫–¥–∂–µ–∫¬ª (–Ω–µ –ø—É—Ç–∞–π—Ç–µ —Å –∏–≥—Ä–æ–π ¬´21 –æ—á–∫–æ¬ª) –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ–±—ã –æ–±—ã–≥—Ä–∞—Ç—å –í–∞—à–µ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (–±–æ—Ç–∞), –∑–∞–ø–æ–ª—É—á–∏–≤ –±√≥–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 21.\n\n"
        "‚ûñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
        "‚†Ä‚ûï –ï—â—ë - –≤–∑—è—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É\n"
        "‚†Ä‚ùå –°—Ç–æ–ø - –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É –∏ —É–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ä—É–∫–µ)\n"
        "‚†Äüí∞ –£–¥–≤–æ–∏—Ç—å - —É–¥–≤–æ–∏—Ç—å —Å—Ç–∞–≤–∫—É, –≤–∑—è—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É (–∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ä—É–∫–µ)\n"
        "‚†Ä‚ÜîÔ∏è –†–∞–∑–¥–µ–ª–∏—Ç—å - —É–¥–≤–æ–∏—Ç—å —Å—Ç–∞–≤–∫—É –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –í–∞—à—É –∫–æ–ª–æ–¥—É –Ω–∞ –¥–≤–µ —Ä—É–∫–∏\n"
        "‚†Ä‚†Ä ‚ûñ –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –¥–≤—É—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø–æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤—É –∫–∞—Ä—Ç (2 –∏ 2, –∫–æ—Ä–æ–ª—å –∏ –¥–∞–º–∞ –∏ —Ç.–¥)\n"
        "‚†Ä‚ù§Ô∏è –ó–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç—å - –≤–Ω–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É —Ä–∞–≤–Ω—É—é –ø–æ–ª–æ–≤–∏–Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏ –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç—å –í–∞—à—É –∫–æ–ª–æ–¥—É\n"
        "‚†Ä‚†Ä ‚ûñ –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —É –±–æ—Ç–∞ —Ç—É–∑–∞\n"
        "‚†Ä‚†Ä ‚ûñ –ï—Å–ª–∏ —É –±–æ—Ç–∞ ¬´–ë–ª—ç–∫–¥–∂–µ–∫¬ª, –í–∞–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é\n\n"
        "‚ûñ –í–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å—Ö–æ–¥—ã:\n"
        "‚†Ä‚ô£Ô∏è –ë–ª—ç–∫–¥–∂–µ–∫ - 21 –æ—á–∫–æ –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã, –ø—Ä–∏–∑ x2.5\n"
        "‚†Ä‚úÖ –ü–æ–±–µ–¥–∞ - –ø—Ä–∏–∑ x2 (–ø—Ä–∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫–µ - —Ö1.5)\n"
        "‚†Ä‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à - —Å—Ç–∞–≤–∫–∞ –∞–Ω–Ω—É–ª–∏—Ä—É–µ—Ç—Å—è\n"
        "‚†Äüí∏ –ù–∏—á—å—è - —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è (—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è)\n\n"
        "‚ô†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –∑–∞ –∫–∞–∂–¥—ã–µ –∫–∞—Ä—Ç—ã:\n"
        "‚†Ä ‚ûñ –ö–∞—Ä—Ç—ã –æ—Ç –¥–≤–æ–π–∫–∏ –¥–æ –¥–µ—Å—è—Ç–∫–∏: 2-10 –æ—á–∫–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ\n"
        "‚†Ä ‚ûñ –ö–∞—Ä—Ç—ã ¬´–∫–∞—Ä—Ç–∏–Ω–∫–∏¬ª (–∫–æ—Ä–æ–ª—å, –¥–∞–º–∞, –≤–∞–ª–µ—Ç): 10 –æ—á–∫–æ–≤\n"
        "‚†Ä ‚ûñ (‚ùóÔ∏è) –¢—É–∑: 11 –æ—á–∫–æ–≤, –ù–û –µ—Å–ª–∏ —Å—É–º–º–∞ —Ç–µ–∫—É—â–∏—Ö –¥–≤—É—Ö –∫–∞—Ä—Ç –±–æ–ª—å—à–µ 10, —Ç–æ —Ü–µ–Ω–∞ —Ç—É–∑–∞ ‚Äî 1 –æ—á–∫–æ"
    )
    if update.callback_query:
        await update.callback_query.message.reply_text(help_text)
    else:
        await update.message.reply_text(help_text)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "blackjack_help":
        await blackjack_help(update, context)
    elif query.data == "blackjack_start":
        await show_bet_menu(update, context)
    elif query.data.startswith("blackjack_bet_"):
        bet = int(query.data.split("_")[2])
        await start_blackjack_game(update, context, bet)
    elif query.data == "blackjack_hit":
        # –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É –∏–≥—Ä–æ–∫—É
        user = users.get(query.from_user.id)
        if not user or 'blackjack' not in user.game_data:
            return
        
        game = user.game_data['blackjack']['game']
        user.game_data['blackjack']['player_cards'].append(game.get_card())
        player_score = game.calculate_score(user.game_data['blackjack']['player_cards'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª—ç–∫–¥–∂–µ–∫
        if await check_blackjack(update, user, game, player_score):
            return
        
        if player_score > 21:
            # –ü—Ä–æ–∏–≥—Ä—ã—à
            player_cards_text = "üé´ –í–∞—à–∏ –∫–∞—Ä—Ç—ã:\n"
            for i, (card, suit) in enumerate(user.game_data['blackjack']['player_cards'], 1):
                player_cards_text += f"‚†Ä{i}‚É£ {suit} {card}\n"
            
            dealer_cards_text = "üéü –ö–∞—Ä—Ç—ã –∫—Ä—É–ø—å–µ:\n"
            dealer_card, dealer_suit = user.game_data['blackjack']['dealer_cards'][0]
            dealer_cards_text += f"‚†Ä1‚É£ {dealer_suit} {dealer_card}"
            
            game_text = (
                f"üí° –í–∞—à–∏ –æ—á–∫–∏: {player_score} ‚èê –ö—Ä—É–ø—å–µ: {game.calculate_score(user.game_data['blackjack']['dealer_cards'])}\n"
                f"{player_cards_text}\n"
                f"{dealer_cards_text}\n"
                f"‚ùå –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance}$"
            )
            
            keyboard = [[InlineKeyboardButton("üîÑ –ò–≥—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="blackjack_start")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(game_text, reply_markup=reply_markup)
            user.game_data.pop('blackjack')
        else:
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É
            player_cards_text = "üé´ –í–∞—à–∏ –∫–∞—Ä—Ç—ã:\n"
            for i, (card, suit) in enumerate(user.game_data['blackjack']['player_cards'], 1):
                player_cards_text += f"‚†Ä{i}‚É£ {suit} {card}\n"
            
            dealer_cards_text = "üéü –ö–∞—Ä—Ç—ã –∫—Ä—É–ø—å–µ:\n"
            dealer_card, dealer_suit = user.game_data['blackjack']['dealer_cards'][0]
            dealer_cards_text += f"‚†Ä1‚É£ {dealer_suit} {dealer_card}"
            
            game_text = (
                f"–ò–≥—Ä–æ–∫, –í–∞—à–∏ –æ—á–∫–∏: {player_score} ‚èê –ö—Ä—É–ø—å–µ: {game.calculate_score(user.game_data['blackjack']['dealer_cards'])}\n"
                f"{player_cards_text}\n"
                f"{dealer_cards_text}\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance}$"
            )
            
            keyboard = [
                [
                    InlineKeyboardButton("‚ûï –ï—â—ë", callback_data="blackjack_hit"),
                    InlineKeyboardButton("‚ùå –°—Ç–æ–ø", callback_data="blackjack_stand")
                ],
                [
                    InlineKeyboardButton("üí∞ –£–¥–≤–æ–∏—Ç—å", callback_data="blackjack_double")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(game_text, reply_markup=reply_markup)
    
    elif query.data == "blackjack_stand":
        # –ò–≥—Ä–æ–∫ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è, –¥–∏–ª–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—ã
        user = users.get(query.from_user.id)
        if not user or 'blackjack' not in user.game_data:
            return
        
        game = user.game_data['blackjack']['game']
        dealer_score = game.calculate_score(user.game_data['blackjack']['dealer_cards'])
        
        # –î–∏–ª–µ—Ä –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—ã, –ø–æ–∫–∞ —É –Ω–µ–≥–æ –º–µ–Ω—å—à–µ 17
        while dealer_score < 17:
            user.game_data['blackjack']['dealer_cards'].append(game.get_card())
            dealer_score = game.calculate_score(user.game_data['blackjack']['dealer_cards'])
        
        player_score = game.calculate_score(user.game_data['blackjack']['player_cards'])
        bet = user.game_data['blackjack']['bet']
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞—Ä—Ç
        player_cards_text = "üé´ –í–∞—à–∏ –∫–∞—Ä—Ç—ã:\n"
        for i, (card, suit) in enumerate(user.game_data['blackjack']['player_cards'], 1):
            player_cards_text += f"‚†Ä{i}‚É£ {suit} {card}\n"
        
        dealer_cards_text = "üéü –ö–∞—Ä—Ç—ã –∫—Ä—É–ø—å–µ:\n"
        for i, (card, suit) in enumerate(user.game_data['blackjack']['dealer_cards'], 1):
            dealer_cards_text += f"‚†Ä{i}‚É£ {suit} {card}\n"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if dealer_score > 21 or player_score > dealer_score:
            # –ò–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞–ª
            win_amount = bet * 2
            user.balance += win_amount
            result_text = f"‚úÖ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount}$!"
        elif player_score < dealer_score:
            # –ò–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–ª
            result_text = f"‚ùå –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet}$!"
        else:
            # –ù–∏—á—å—è
            user.balance += bet
            result_text = "ü§ù –ù–∏—á—å—è! –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞."
        
        game_text = (
            f"üí° –í–∞—à–∏ –æ—á–∫–∏: {player_score} ‚èê –ö—Ä—É–ø—å–µ: {dealer_score}\n"
            f"{player_cards_text}\n"
            f"{dealer_cards_text}\n"
            f"{result_text}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance}$"
        )
        
        keyboard = [[InlineKeyboardButton("üîÑ –ò–≥—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="blackjack_start")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(game_text, reply_markup=reply_markup)
        user.game_data.pop('blackjack')
    
    elif query.data == "blackjack_double":
        # –£–¥–≤–æ–∏—Ç—å —Å—Ç–∞–≤–∫—É –∏ –≤–∑—è—Ç—å –æ–¥–Ω—É –∫–∞—Ä—Ç—É
        user = users.get(query.from_user.id)
        if not user or 'blackjack' not in user.game_data:
            return
        
        bet = user.game_data['blackjack']['bet']
        if user.balance < bet:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –¥–µ–Ω–µ–≥ –Ω–∞ —É–¥–≤–æ–µ–Ω–∏–µ
            await query.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —É–¥–≤–æ–µ–Ω–∏—è!")
            return
        
        # –£–¥–≤–∞–∏–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
        user.balance -= bet
        user.game_data['blackjack']['bet'] = bet * 2
        
        # –ë–µ—Ä–µ–º –æ–¥–Ω—É –∫–∞—Ä—Ç—É
        game = user.game_data['blackjack']['game']
        user.game_data['blackjack']['player_cards'].append(game.get_card())
        player_score = game.calculate_score(user.game_data['blackjack']['player_cards'])
        
        # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        dealer_score = game.calculate_score(user.game_data['blackjack']['dealer_cards'])
        while dealer_score < 17:
            user.game_data['blackjack']['dealer_cards'].append(game.get_card())
            dealer_score = game.calculate_score(user.game_data['blackjack']['dealer_cards'])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞—Ä—Ç
        player_cards_text = "üé´ –í–∞—à–∏ –∫–∞—Ä—Ç—ã:\n"
        for i, (card, suit) in enumerate(user.game_data['blackjack']['player_cards'], 1):
            player_cards_text += f"‚†Ä{i}‚É£ {suit} {card}\n"
        
        dealer_cards_text = "üéü –ö–∞—Ä—Ç—ã –∫—Ä—É–ø—å–µ:\n"
        for i, (card, suit) in enumerate(user.game_data['blackjack']['dealer_cards'], 1):
            dealer_cards_text += f"‚†Ä{i}‚É£ {suit} {card}\n"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        doubled_bet = bet * 2
        if player_score > 21:
            result_text = f"‚ùå –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {doubled_bet}$!"
        elif dealer_score > 21 or player_score > dealer_score:
            win_amount = doubled_bet * 2
            user.balance += win_amount
            result_text = f"‚úÖ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount}$!"
        elif player_score < dealer_score:
            result_text = f"‚ùå –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {doubled_bet}$!"
        else:
            user.balance += doubled_bet
            result_text = "ü§ù –ù–∏—á—å—è! –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞."
        
        game_text = (
            f"üí° –í–∞—à–∏ –æ—á–∫–∏: {player_score} ‚èê –ö—Ä—É–ø—å–µ: {dealer_score}\n"
            f"{player_cards_text}\n"
            f"{dealer_cards_text}\n"
            f"{result_text}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance}$"
        )
        
        keyboard = [[InlineKeyboardButton("üîÑ –ò–≥—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="blackjack_start")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(game_text, reply_markup=reply_markup)
        user.game_data.pop('blackjack')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    
    if text == "–ø–æ–º–æ—â—å –±–ª—ç–∫–¥–∂–µ–∫":
        await blackjack_help(update, context)
    elif text == "üé≤ —Ä—É–ª–µ—Ç–∫–∞":
        await show_roulette_menu(update, context)
    elif text == "‚ô†Ô∏è –±–ª—ç–∫–¥–∂–µ–∫":
        await show_blackjack_menu(update, context)
    elif text == "üöÄ –∏–≥—Ä—ã":
        await show_games_menu(update, context)
    elif text == "üíé –æ—Å–Ω–æ–≤–Ω–æ–µ":
        await show_main_menu(update, context)
    elif text == "üìí –ø—Ä–æ—Ñ–∏–ª—å":
        await show_profile(update, context)
    elif text == "‚óÄÔ∏è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await start(update, context)

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(button_callback))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()