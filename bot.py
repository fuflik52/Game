import logging
import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler
import random
from sqlalchemy import create_engine, Column, Integer, String, Float, DateTime, func
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ADMIN_ID = 1449276772
BOT_TOKEN = os.getenv('BOT_TOKEN')
DATABASE_URL = 'postgresql://postgres:jUGJtRdVtAkahZBRBZMlpIICrkDfuuhq@junction.proxy.rlwy.net:19226/railway'

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
engine = create_engine(DATABASE_URL)
Session = sessionmaker(bind=engine)
Base = declarative_base()

# –ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
class User(Base):
    __tablename__ = 'users'
    
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, unique=True)
    username = Column(String)
    balance = Column(Float, default=5000)
    rating = Column(Integer, default=0)
    clan = Column(String, nullable=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    last_active = Column(DateTime, default=datetime.utcnow)

class GameLog(Base):
    __tablename__ = 'game_logs'
    
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer)
    game_type = Column(String)
    bet = Column(Float)
    result = Column(String)
    profit = Column(Float)
    played_at = Column(DateTime, default=datetime.utcnow)

class SupportTicket(Base):
    __tablename__ = 'support_tickets'
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer)
    username = Column(String)
    message = Column(String)
    status = Column(String, default='open')  # open, answered, closed
    created_at = Column(DateTime, default=datetime.utcnow)
    answer = Column(String, nullable=True)
    answered_at = Column(DateTime, nullable=True)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
Base.metadata.create_all(engine)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv('BOT_TOKEN')

def get_or_create_user(session, user_id, username):
    user = session.query(User).filter_by(user_id=user_id).first()
    if not user:
        user = User(user_id=user_id, username=username)
        session.add(user)
        session.commit()
    return user

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = Session()
    user = get_or_create_user(session, update.effective_user.id, update.effective_user.username)
    session.close()

    keyboard = [
        ["üíé –û—Å–Ω–æ–≤–Ω–æ–µ", "üöÄ –ò–≥—Ä—ã"],
        ["üòé –ü–µ—Ä—Å–æ–Ω–∞–∂"],
        ["üÉè –ü–æ–∫–µ—Ä", "üìä –ë–∏—Ä–∂–∞"],
        ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å", "üìí –ü—Ä–æ—Ñ–∏–ª—å", "üî• –î–æ–Ω–∞—Ç"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}!\n"
        "–Ø - —Ç–≤–æ–π –Ω–æ–≤—ã–π –∏–≥—Ä–æ–≤–æ–π –¥—Ä—É–≥.\n\n"
        "üéâ –ó–¥–µ—Å—å —Ç–µ–±—è –∂–¥—ë—Ç –º–æ—Ä–µ –≤–µ—Å–µ–ª—å—è –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–≥—Ä, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π —Ç–≤–æ–π –¥–µ–Ω—å –±—ã–ª —è—Ä—á–µ! ü•∞\n\n"
        "üöÄ –ì–æ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ? –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ –∏ –≤–ø–µ—Ä—ë–¥! üëá",
        reply_markup=reply_markup
    )

async def show_games_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["üÉè –ü–æ–∫–µ—Ä"],
        ["üé∞ –õ–æ—Ç–µ—Ä–µ—è", "üé∞ –ö–∞–∑–∏–Ω–æ", "üé≤ –†—É–ª–µ—Ç–∫–∞"],
        ["üìà –ö—Ä–∞—à", "üìä –¢—Ä–µ–π–¥", "üí∞ –°–ª–æ—Ç—ã"],
        ["ü™ô –ú–æ–Ω–µ—Ç–∫–∞", "‚ô†Ô∏è –ë–ª—ç–∫–¥–∂–µ–∫", "‚ùå –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏"],
        ["üî¢ 2048", "‚úèÔ∏è –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", "‚ùì –ó–∞–≥–∞–¥–∫–∏"],
        ["‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=reply_markup)

async def show_blackjack_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="blackjack_start"),
            InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="blackjack_help")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üÉè –ë–ª—ç–∫–¥–∂–µ–∫\n"
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 10$\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def show_bet_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = Session()
    user = get_or_create_user(session, update.callback_query.from_user.id, update.callback_query.from_user.username)
    session.close()
    
    one_third = user.balance // 3
    two_thirds = (user.balance * 2) // 3
    
    keyboard = [
        [
            InlineKeyboardButton(f"{one_third}$", callback_data=f"blackjack_bet_{one_third}"),
            InlineKeyboardButton(f"{two_thirds}$", callback_data=f"blackjack_bet_{two_thirds}")
        ],
        [
            InlineKeyboardButton("–í–∞-–±–∞–Ω–∫", callback_data=f"blackjack_bet_{user.balance}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text(
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance}$\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:",
        reply_markup=reply_markup
    )

async def check_blackjack(update: Update, user, game, player_score):
    if player_score == 21:
        session = Session()
        bet = user.balance
        win_amount = bet * 2  # –í—ã–∏–≥—Ä—ã—à —Ö2 –ø—Ä–∏ 21 –æ—á–∫–µ
        user.balance += win_amount
        session.commit()
        session.close()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞—Ä—Ç
        player_cards_text = "üé´ –í–∞—à–∏ –∫–∞—Ä—Ç—ã:\n"
        for i, (card, suit) in enumerate(game.player_cards, 1):
            player_cards_text += f"‚†Ä{i}‚É£ {suit} {card}\n"
        
        dealer_cards_text = "üéü –ö–∞—Ä—Ç—ã –∫—Ä—É–ø—å–µ:\n"
        dealer_card, dealer_suit = game.dealer_cards[0]
        dealer_cards_text += f"‚†Ä1‚É£ {dealer_suit} {dealer_card}"
        
        game_text = (
            f"üí° –í–∞—à–∏ –æ—á–∫–∏: {player_score} ‚èê –ö—Ä—É–ø—å–µ: {game.calculate_score(game.dealer_cards)}\n"
            f"{player_cards_text}\n"
            f"{dealer_cards_text}\n"
            f"üåü –ë–ª—ç–∫–¥–∂–µ–∫! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount}$!\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance}$"
        )
        
        keyboard = [[InlineKeyboardButton("üîÑ –ò–≥—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="blackjack_start")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.message.reply_text(game_text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(game_text, reply_markup=reply_markup)
            
        return True
    return False

class BlackjackGame:
    def __init__(self):
        self.deck = ['2', '3', '4', '5', '6', '7', '8', '9', '10', '–í–∞–ª–µ—Ç', '–î–∞–º–∞', '–ö–æ—Ä–æ–ª—å', '–¢—É–∑'] * 4
        self.suits = ['‚ô†Ô∏è', '‚ô£Ô∏è', '‚ô•Ô∏è', '‚ô¶']
        self.card_values = {
            '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10,
            '–í–∞–ª–µ—Ç': 10, '–î–∞–º–∞': 10, '–ö–æ—Ä–æ–ª—å': 10, '–¢—É–∑': 11
        }
        self.player_cards = []
        self.dealer_cards = []

    def get_card(self):
        card = random.choice(self.deck)
        suit = random.choice(self.suits)
        return card, suit

    def calculate_score(self, cards):
        score = 0
        aces = 0
        for card, _ in cards:
            if card == '–¢—É–∑':
                aces += 1
            else:
                score += self.card_values[card]
        
        for _ in range(aces):
            if score + 11 <= 21:
                score += 11
            else:
                score += 1
        return score

async def start_blackjack_game(update: Update, context: ContextTypes.DEFAULT_TYPE, bet: int):
    query = update.callback_query
    session = Session()
    user = get_or_create_user(session, query.from_user.id, query.from_user.username)
    session.close()
    
    if bet > user.balance:
        await query.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
        return
    
    user.balance -= bet
    session = Session()
    session.add(GameLog(user_id=user.user_id, game_type='blackjack', bet=bet, result='in_progress'))
    session.commit()
    session.close()
    
    game = BlackjackGame()
    game.player_cards = [game.get_card(), game.get_card()]
    game.dealer_cards = [game.get_card()]
    
    player_score = game.calculate_score(game.player_cards)
    dealer_score = game.calculate_score(game.dealer_cards)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª—ç–∫–¥–∂–µ–∫
    if await check_blackjack(update, user, game, player_score):
        session = Session()
        game_log = session.query(GameLog).filter_by(user_id=user.user_id, result='in_progress').first()
        game_log.result = 'win'
        game_log.profit = bet * 2
        session.commit()
        session.close()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞
    player_cards_text = "üé´ –í–∞—à–∏ –∫–∞—Ä—Ç—ã:\n"
    for i, (card, suit) in enumerate(game.player_cards, 1):
        player_cards_text += f"‚†Ä{i}‚É£ {suit} {card}\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞—Ä—Ç –∫—Ä—É–ø—å–µ
    dealer_cards_text = "üéü –ö–∞—Ä—Ç—ã –∫—Ä—É–ø—å–µ:\n"
    dealer_card, dealer_suit = game.dealer_cards[0]
    dealer_cards_text += f"‚†Ä1‚É£ {dealer_suit} {dealer_card}"
    
    game_text = (
        f"–ò–≥—Ä–æ–∫, –í–∞—à–∏ –æ—á–∫–∏: {player_score} ‚èê –ö—Ä—É–ø—å–µ: {dealer_score}\n"
        f"{player_cards_text}\n"
        f"{dealer_cards_text}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance}$"
    )
    
    keyboard = [
        [
            InlineKeyboardButton("‚ûï –ï—â—ë", callback_data="blackjack_hit"),
            InlineKeyboardButton("‚ùå –°—Ç–æ–ø", callback_data="blackjack_stand")
        ],
        [
            InlineKeyboardButton("üí∞ –£–¥–≤–æ–∏—Ç—å", callback_data="blackjack_double")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(game_text, reply_markup=reply_markup)

async def blackjack_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "[üíã –ï–±–µ–º –ª–µ—Å—é] –ò–≥—Ä–æ–∫, –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "‚ô£Ô∏è –°—É—Ç—å –∏–≥—Ä—ã ¬´–ë–ª—ç–∫–¥–∂–µ–∫¬ª (–Ω–µ –ø—É—Ç–∞–π—Ç–µ —Å –∏–≥—Ä–æ–π ¬´21 –æ—á–∫–æ¬ª) –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ–±—ã –æ–±—ã–≥—Ä–∞—Ç—å –í–∞—à–µ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (–±–æ—Ç–∞), –∑–∞–ø–æ–ª—É—á–∏–≤ –±√≥–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 21.\n\n"
        "‚ûñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
        "‚†Ä‚ûï –ï—â—ë - –≤–∑—è—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É\n"
        "‚†Ä‚ùå –°—Ç–æ–ø - –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É –∏ —É–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ä—É–∫–µ)\n"
        "‚†Äüí∞ –£–¥–≤–æ–∏—Ç—å - —É–¥–≤–æ–∏—Ç—å —Å—Ç–∞–≤–∫—É, –≤–∑—è—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É (–∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ä—É–∫–µ)\n"
        "‚†Ä‚ÜîÔ∏è –†–∞–∑–¥–µ–ª–∏—Ç—å - —É–¥–≤–æ–∏—Ç—å —Å—Ç–∞–≤–∫—É –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –í–∞—à—É –∫–æ–ª–æ–¥—É –Ω–∞ –¥–≤–µ —Ä—É–∫–∏\n"
        "‚†Ä‚†Ä ‚ûñ –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –¥–≤—É—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø–æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤—É –∫–∞—Ä—Ç (2 –∏ 2, –∫–æ—Ä–æ–ª—å –∏ –¥–∞–º–∞ –∏ —Ç.–¥)\n"
        "‚†Ä‚ù§Ô∏è –ó–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç—å - –≤–Ω–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É —Ä–∞–≤–Ω—É—é –ø–æ–ª–æ–≤–∏–Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏ –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç—å –í–∞—à—É –∫–æ–ª–æ–¥—É\n"
        "‚†Ä‚†Ä ‚ûñ –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —É –±–æ—Ç–∞ —Ç—É–∑–∞\n"
        "‚†Ä‚†Ä ‚ûñ –ï—Å–ª–∏ —É –±–æ—Ç–∞ ¬´–ë–ª—ç–∫–¥–∂–µ–∫¬ª, –í–∞–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é\n\n"
        "‚ûñ –í–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å—Ö–æ–¥—ã:\n"
        "‚†Ä‚ô£Ô∏è –ë–ª—ç–∫–¥–∂–µ–∫ - 21 –æ—á–∫–æ –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã, –ø—Ä–∏–∑ x2.5\n"
        "‚†Ä‚úÖ –ü–æ–±–µ–¥–∞ - –ø—Ä–∏–∑ x2 (–ø—Ä–∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫–µ - —Ö1.5)\n"
        "‚†Ä‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à - —Å—Ç–∞–≤–∫–∞ –∞–Ω–Ω—É–ª–∏—Ä—É–µ—Ç—Å—è\n"
        "‚†Äüí∏ –ù–∏—á—å—è - —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è (—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è)\n\n"
        "‚ô†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –∑–∞ –∫–∞–∂–¥—ã–µ –∫–∞—Ä—Ç—ã:\n"
        "‚†Ä ‚ûñ –ö–∞—Ä—Ç—ã –æ—Ç –¥–≤–æ–π–∫–∏ –¥–æ –¥–µ—Å—è—Ç–∫–∏: 2-10 –æ—á–∫–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ\n"
        "‚†Ä ‚ûñ –ö–∞—Ä—Ç—ã ¬´–∫–∞—Ä—Ç–∏–Ω–∫–∏¬ª (–∫–æ—Ä–æ–ª—å, –¥–∞–º–∞, –≤–∞–ª–µ—Ç): 10 –æ—á–∫–æ–≤\n"
        "‚†Ä ‚ûñ (‚ùóÔ∏è) –¢—É–∑: 11 –æ—á–∫–æ–≤, –ù–û –µ—Å–ª–∏ —Å—É–º–º–∞ —Ç–µ–∫—É—â–∏—Ö –¥–≤—É—Ö –∫–∞—Ä—Ç –±–æ–ª—å—à–µ 10, —Ç–æ —Ü–µ–Ω–∞ —Ç—É–∑–∞ ‚Äî 1 –æ—á–∫–æ"
    )
    if update.callback_query:
        await update.callback_query.message.reply_text(help_text)
    else:
        await update.message.reply_text(help_text)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "blackjack_help":
        await blackjack_help(update, context)
    elif query.data == "blackjack_start":
        await show_bet_menu(update, context)
    elif query.data.startswith("blackjack_bet_"):
        bet = int(query.data.split("_")[2])
        await start_blackjack_game(update, context, bet)
    elif query.data == "blackjack_hit":
        # –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É –∏–≥—Ä–æ–∫—É
        session = Session()
        user = get_or_create_user(session, query.from_user.id, query.from_user.username)
        session.close()
        
        game = BlackjackGame()
        game.player_cards = [game.get_card(), game.get_card()]
        game.dealer_cards = [game.get_card()]
        
        game.player_cards.append(game.get_card())
        player_score = game.calculate_score(game.player_cards)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª—ç–∫–¥–∂–µ–∫
        if await check_blackjack(update, user, game, player_score):
            session = Session()
            game_log = session.query(GameLog).filter_by(user_id=user.user_id, result='in_progress').first()
            game_log.result = 'win'
            game_log.profit = user.balance * 2
            session.commit()
            session.close()
            return
        
        if player_score > 21:
            # –ü—Ä–æ–∏–≥—Ä—ã—à
            session = Session()
            game_log = session.query(GameLog).filter_by(user_id=user.user_id, result='in_progress').first()
            game_log.result = 'lose'
            session.commit()
            session.close()
            
            player_cards_text = "üé´ –í–∞—à–∏ –∫–∞—Ä—Ç—ã:\n"
            for i, (card, suit) in enumerate(game.player_cards, 1):
                player_cards_text += f"‚†Ä{i}‚É£ {suit} {card}\n"
            
            dealer_cards_text = "üéü –ö–∞—Ä—Ç—ã –∫—Ä—É–ø—å–µ:\n"
            dealer_card, dealer_suit = game.dealer_cards[0]
            dealer_cards_text += f"‚†Ä1‚É£ {dealer_suit} {dealer_card}"
            
            game_text = (
                f"üí° –í–∞—à–∏ –æ—á–∫–∏: {player_score} ‚èê –ö—Ä—É–ø—å–µ: {game.calculate_score(game.dealer_cards)}\n"
                f"{player_cards_text}\n"
                f"{dealer_cards_text}\n"
                f"‚ùå –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance}$"
            )
            
            keyboard = [[InlineKeyboardButton("üîÑ –ò–≥—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="blackjack_start")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(game_text, reply_markup=reply_markup)
        else:
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É
            player_cards_text = "üé´ –í–∞—à–∏ –∫–∞—Ä—Ç—ã:\n"
            for i, (card, suit) in enumerate(game.player_cards, 1):
                player_cards_text += f"‚†Ä{i}‚É£ {suit} {card}\n"
            
            dealer_cards_text = "üéü –ö–∞—Ä—Ç—ã –∫—Ä—É–ø—å–µ:\n"
            dealer_card, dealer_suit = game.dealer_cards[0]
            dealer_cards_text += f"‚†Ä1‚É£ {dealer_suit} {dealer_card}"
            
            game_text = (
                f"–ò–≥—Ä–æ–∫, –í–∞—à–∏ –æ—á–∫–∏: {player_score} ‚èê –ö—Ä—É–ø—å–µ: {game.calculate_score(game.dealer_cards)}\n"
                f"{player_cards_text}\n"
                f"{dealer_cards_text}\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance}$"
            )
            
            keyboard = [
                [
                    InlineKeyboardButton("‚ûï –ï—â—ë", callback_data="blackjack_hit"),
                    InlineKeyboardButton("‚ùå –°—Ç–æ–ø", callback_data="blackjack_stand")
                ],
                [
                    InlineKeyboardButton("üí∞ –£–¥–≤–æ–∏—Ç—å", callback_data="blackjack_double")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(game_text, reply_markup=reply_markup)
    
    elif query.data == "blackjack_stand":
        # –ò–≥—Ä–æ–∫ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è, –¥–∏–ª–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—ã
        session = Session()
        user = get_or_create_user(session, query.from_user.id, query.from_user.username)
        session.close()
        
        game = BlackjackGame()
        game.player_cards = [game.get_card(), game.get_card()]
        game.dealer_cards = [game.get_card()]
        
        dealer_score = game.calculate_score(game.dealer_cards)
        
        # –î–∏–ª–µ—Ä –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—ã, –ø–æ–∫–∞ —É –Ω–µ–≥–æ –º–µ–Ω—å—à–µ 17
        while dealer_score < 17:
            game.dealer_cards.append(game.get_card())
            dealer_score = game.calculate_score(game.dealer_cards)
        
        player_score = game.calculate_score(game.player_cards)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞—Ä—Ç
        player_cards_text = "üé´ –í–∞—à–∏ –∫–∞—Ä—Ç—ã:\n"
        for i, (card, suit) in enumerate(game.player_cards, 1):
            player_cards_text += f"‚†Ä{i}‚É£ {suit} {card}\n"
        
        dealer_cards_text = "üéü –ö–∞—Ä—Ç—ã –∫—Ä—É–ø—å–µ:\n"
        for i, (card, suit) in enumerate(game.dealer_cards, 1):
            dealer_cards_text += f"‚†Ä{i}‚É£ {suit} {card}\n"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        session = Session()
        game_log = session.query(GameLog).filter_by(user_id=user.user_id, result='in_progress').first()
        if dealer_score > 21 or player_score > dealer_score:
            # –ò–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞–ª
            win_amount = user.balance * 2
            user.balance += win_amount
            game_log.result = 'win'
            game_log.profit = win_amount
            session.commit()
            session.close()
            result_text = f"‚úÖ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount}$!"
        elif player_score < dealer_score:
            # –ò–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–ª
            game_log.result = 'lose'
            session.commit()
            session.close()
            result_text = f"‚ùå –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {user.balance}$!"
        else:
            # –ù–∏—á—å—è
            user.balance += user.balance
            game_log.result = 'draw'
            session.commit()
            session.close()
            result_text = "ü§ù –ù–∏—á—å—è! –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞."
        
        game_text = (
            f"üí° –í–∞—à–∏ –æ—á–∫–∏: {player_score} ‚èê –ö—Ä—É–ø—å–µ: {dealer_score}\n"
            f"{player_cards_text}\n"
            f"{dealer_cards_text}\n"
            f"{result_text}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance}$"
        )
        
        keyboard = [[InlineKeyboardButton("üîÑ –ò–≥—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="blackjack_start")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(game_text, reply_markup=reply_markup)
    
    elif query.data == "blackjack_double":
        # –£–¥–≤–æ–∏—Ç—å —Å—Ç–∞–≤–∫—É –∏ –≤–∑—è—Ç—å –æ–¥–Ω—É –∫–∞—Ä—Ç—É
        session = Session()
        user = get_or_create_user(session, query.from_user.id, query.from_user.username)
        session.close()
        
        bet = user.balance
        if user.balance < bet:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –¥–µ–Ω–µ–≥ –Ω–∞ —É–¥–≤–æ–µ–Ω–∏–µ
            await query.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —É–¥–≤–æ–µ–Ω–∏—è!")
            return
        
        # –£–¥–≤–∞–∏–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
        user.balance -= bet
        session = Session()
        game_log = session.query(GameLog).filter_by(user_id=user.user_id, result='in_progress').first()
        game_log.bet = bet * 2
        session.commit()
        session.close()
        
        # –ë–µ—Ä–µ–º –æ–¥–Ω—É –∫–∞—Ä—Ç—É
        game = BlackjackGame()
        game.player_cards = [game.get_card(), game.get_card()]
        game.dealer_cards = [game.get_card()]
        
        game.player_cards.append(game.get_card())
        player_score = game.calculate_score(game.player_cards)
        
        # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        dealer_score = game.calculate_score(game.dealer_cards)
        while dealer_score < 17:
            game.dealer_cards.append(game.get_card())
            dealer_score = game.calculate_score(game.dealer_cards)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞—Ä—Ç
        player_cards_text = "üé´ –í–∞—à–∏ –∫–∞—Ä—Ç—ã:\n"
        for i, (card, suit) in enumerate(game.player_cards, 1):
            player_cards_text += f"‚†Ä{i}‚É£ {suit} {card}\n"
        
        dealer_cards_text = "üéü –ö–∞—Ä—Ç—ã –∫—Ä—É–ø—å–µ:\n"
        for i, (card, suit) in enumerate(game.dealer_cards, 1):
            dealer_cards_text += f"‚†Ä{i}‚É£ {suit} {card}\n"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        doubled_bet = bet * 2
        session = Session()
        game_log = session.query(GameLog).filter_by(user_id=user.user_id, result='in_progress').first()
        if player_score > 21:
            game_log.result = 'lose'
            session.commit()
            session.close()
            result_text = f"‚ùå –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {doubled_bet}$!"
        elif dealer_score > 21 or player_score > dealer_score:
            win_amount = doubled_bet * 2
            user.balance += win_amount
            game_log.result = 'win'
            game_log.profit = win_amount
            session.commit()
            session.close()
            result_text = f"‚úÖ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount}$!"
        elif player_score < dealer_score:
            game_log.result = 'lose'
            session.commit()
            session.close()
            result_text = f"‚ùå –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {doubled_bet}$!"
        else:
            user.balance += doubled_bet
            game_log.result = 'draw'
            session.commit()
            session.close()
            result_text = "ü§ù –ù–∏—á—å—è! –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞."
        
        game_text = (
            f"üí° –í–∞—à–∏ –æ—á–∫–∏: {player_score} ‚èê –ö—Ä—É–ø—å–µ: {dealer_score}\n"
            f"{player_cards_text}\n"
            f"{dealer_cards_text}\n"
            f"{result_text}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance}$"
        )
        
        keyboard = [[InlineKeyboardButton("üîÑ –ò–≥—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="blackjack_start")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(game_text, reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    
    if text == "–ø–æ–º–æ—â—å –±–ª—ç–∫–¥–∂–µ–∫":
        await blackjack_help(update, context)
    elif text == "üé≤ —Ä—É–ª–µ—Ç–∫–∞":
        await show_roulette_menu(update, context)
    elif text == "‚ô†Ô∏è –±–ª—ç–∫–¥–∂–µ–∫":
        await show_blackjack_menu(update, context)
    elif text == "üöÄ –∏–≥—Ä—ã":
        await show_games_menu(update, context)
    elif text == "üíé –æ—Å–Ω–æ–≤–Ω–æ–µ":
        await show_main_menu(update, context)
    elif text == "üìí –ø—Ä–æ—Ñ–∏–ª—å":
        await show_profile(update, context)
    elif text == "‚óÄÔ∏è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await start(update, context)

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = Session()
    user = get_or_create_user(session, update.effective_user.id, update.effective_user.username)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä
    games_played = session.query(func.count(GameLog.id)).filter_by(user_id=user.user_id).scalar()
    total_profit = session.query(func.sum(GameLog.profit)).filter_by(user_id=user.user_id).scalar() or 0
    
    profile_text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞\n\n"
        f"üÜî ID: {user.user_id}\n"
        f"üë§ –ò–º—è: {update.effective_user.first_name}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance}$\n"
        f"üèÜ –†–µ–π—Ç–∏–Ω–≥: {user.rating}\n"
        f"üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {games_played}\n"
        f"üíµ –û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {total_profit}$\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}"
    )
    
    session.close()
    await update.message.reply_text(profile_text)

async def test_db(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session = Session()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = session.query(User).filter_by(user_id=update.effective_user.id).first()
        
        if user:
            await update.message.reply_text(
                f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n"
                f"–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
                f"ID: {user.user_id}\n"
                f"–ò–º—è: {user.username}\n"
                f"–ë–∞–ª–∞–Ω—Å: {user.balance}\n"
                f"–°–æ–∑–¥–∞–Ω: {user.created_at}"
            )
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            test_user = User(
                user_id=update.effective_user.id,
                username=update.effective_user.username or "Unknown",
                balance=5000.0
            )
            session.add(test_user)
            session.commit()
            
            await update.message.reply_text(
                f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n"
                f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
                f"ID: {test_user.user_id}\n"
                f"–ò–º—è: {test_user.username}\n"
                f"–ë–∞–ª–∞–Ω—Å: {test_user.balance}"
            )
            
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    finally:
        session.close()

async def send_to_admin(message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É"""
    try:
        await application.bot.send_message(chat_id=ADMIN_ID, text=message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

async def admin_give_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    try:
        # –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /give_balance user_id amount
        args = context.args
        if len(args) != 2:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /give_balance user_id amount")
            return

        user_id = int(args[0])
        amount = float(args[1])

        session = Session()
        user = session.query(User).filter_by(user_id=user_id).first()
        
        if not user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        user.balance += amount
        session.commit()

        await update.message.reply_text(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} –æ–±–Ω–æ–≤–ª–µ–Ω: {user.balance}")
        await application.bot.send_message(
            chat_id=user_id,
            text=f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞ {amount}!\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance}"
        )

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        session.close()

async def admin_view_tickets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏–∫–µ—Ç–æ–≤"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    session = Session()
    try:
        tickets = session.query(SupportTicket).filter_by(status='open').all()
        if not tickets:
            await update.message.reply_text("üì´ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤")
            return

        for ticket in tickets:
            await update.message.reply_text(
                f"üé´ –¢–∏–∫–µ—Ç #{ticket.id}\n"
                f"–û—Ç: {ticket.username} (ID: {ticket.user_id})\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–µ: {ticket.message}\n"
                f"–°—Ç–∞—Ç—É—Å: {ticket.status}\n"
                f"–°–æ–∑–¥–∞–Ω: {ticket.created_at}\n\n"
                f"–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                f"/answer_ticket {ticket.id} –≤–∞—à_–æ—Ç–≤–µ—Ç"
            )
    finally:
        session.close()

async def admin_answer_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    try:
        # –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /answer_ticket ticket_id answer_text
        args = context.args
        if len(args) < 2:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /answer_ticket ticket_id answer_text")
            return

        ticket_id = int(args[0])
        answer = ' '.join(args[1:])

        session = Session()
        ticket = session.query(SupportTicket).filter_by(id=ticket_id).first()
        
        if not ticket:
            await update.message.reply_text("‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        ticket.status = 'answered'
        ticket.answer = answer
        ticket.answered_at = datetime.utcnow()
        session.commit()

        await update.message.reply_text(f"‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        await application.bot.send_message(
            chat_id=ticket.user_id,
            text=f"üì¨ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à —Ç–∏–∫–µ—Ç #{ticket.id}:\n\n"
                 f"–í–∞—à –≤–æ–ø—Ä–æ—Å: {ticket.message}\n"
                 f"–û—Ç–≤–µ—Ç: {answer}"
        )

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        session.close()

async def create_support_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    try:
        message = ' '.join(context.args)
        if not message:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã\n"
                "–ü—Ä–∏–º–µ—Ä: /support –£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –∏–≥—Ä–æ–π"
            )
            return

        session = Session()
        ticket = SupportTicket(
            user_id=update.effective_user.id,
            username=update.effective_user.username,
            message=message
        )
        session.add(ticket)
        session.commit()

        await update.message.reply_text(
            f"‚úÖ –í–∞—à —Ç–∏–∫–µ—Ç #{ticket.id} —Å–æ–∑–¥–∞–Ω!\n"
            f"–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ."
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        await send_to_admin(
            f"üì¨ –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #{ticket.id}\n"
            f"–û—Ç: {ticket.username} (ID: {ticket.user_id})\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message}"
        )

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞: {str(e)}")
    finally:
        session.close()

def main():
    global application
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("games", show_games_menu))
    application.add_handler(CommandHandler("profile", show_profile))
    application.add_handler(CommandHandler("help", blackjack_help))
    application.add_handler(CommandHandler("test_db", test_db))
    
    # –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("give_balance", admin_give_balance))
    application.add_handler(CommandHandler("tickets", admin_view_tickets))
    application.add_handler(CommandHandler("answer_ticket", admin_answer_ticket))
    
    # –ö–æ–º–∞–Ω–¥—ã —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
    application.add_handler(CommandHandler("support", create_support_ticket))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    application.run_polling()

if __name__ == '__main__':
    main()
